// Script s·ª≠a l·ªói 406 cho user_settings
import pkg from 'pg';
const { Client } = pkg;

console.log('üîß S·ª¨A L·ªñI 406 CHO USER_SETTINGS...\n');

// Th√¥ng tin k·∫øt n·ªëi
const connectionString = 'postgresql://postgres.lnqvjmdffzlxzavfxmek:Donhang1@@aws-1-ap-southeast-1.pooler.supabase.com:6543/postgres';

const client = new Client({
  connectionString: connectionString,
});

async function fixUserSettingsPolicies() {
  try {
    console.log('üîå K·∫øt n·ªëi ƒë·∫øn PostgreSQL...');
    await client.connect();
    console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!\n');

    // Ki·ªÉm tra current state
    console.log('üìã KI·ªÇM TRA TR·∫†NG TH√ÅI HI·ªÜN T·∫†I...\n');

    // Check if tables exist
    const tablesResult = await client.query(`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public'
      AND table_name IN ('shipping_forms', 'user_settings')
    `);

    console.log('üìä Tables found:', tablesResult.rows.map(r => r.table_name));

    // Check RLS status
    const rlsResult = await client.query(`
      SELECT schemaname, tablename, rowsecurity
      FROM pg_tables
      WHERE schemaname = 'public'
      AND tablename IN ('shipping_forms', 'user_settings')
    `);

    console.log('üîí RLS Status:');
    rlsResult.rows.forEach(row => {
      console.log(`   ${row.tablename}: ${row.rowsecurity ? 'ENABLED' : 'DISABLED'}`);
    });

    // Check existing policies
    const policiesResult = await client.query(`
      SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual
      FROM pg_policies
      WHERE schemaname = 'public'
      AND tablename IN ('shipping_forms', 'user_settings')
    `);

    console.log('\nüìã Existing Policies:');
    if (policiesResult.rows.length === 0) {
      console.log('   ‚ùå No policies found - this might be the issue!');
    } else {
      policiesResult.rows.forEach(policy => {
        console.log(`   ${policy.tablename}: ${policy.policyname} (${policy.cmd})`);
      });
    }

    console.log('\nüîß S·ª¨A L·ªñI RLS POLICIES...\n');

    // Step 1: Temporarily disable RLS to test
    console.log('1Ô∏è‚É£ T·∫Øt RLS t·∫°m th·ªùi...');
    await client.query('ALTER TABLE user_settings DISABLE ROW LEVEL SECURITY;');
    await client.query('ALTER TABLE shipping_forms DISABLE ROW LEVEL SECURITY;');
    console.log('‚úÖ ƒê√£ t·∫Øt RLS\n');

    // Step 2: Drop existing policies
    console.log('2Ô∏è‚É£ X√≥a policies c≈©...');
    try {
      await client.query('DROP POLICY IF EXISTS "allow_all_settings" ON user_settings;');
      await client.query('DROP POLICY IF EXISTS "allow_all_forms" ON shipping_forms;');
      console.log('‚úÖ ƒê√£ x√≥a policies c≈©');
    } catch (error) {
      console.log('‚ö†Ô∏è  Kh√¥ng c√≥ policies c≈© ƒë·ªÉ x√≥a');
    }

    // Step 3: Create new permissive policies
    console.log('\n3Ô∏è‚É£ T·∫°o policies m·ªõi...');

    // For user_settings - allow all operations
    await client.query(`
      CREATE POLICY "user_settings_allow_all" ON user_settings
      FOR ALL USING (true) WITH CHECK (true);
    `);
    console.log('‚úÖ Policy cho user_settings created');

    // For shipping_forms - allow all operations
    await client.query(`
      CREATE POLICY "shipping_forms_allow_all" ON shipping_forms
      FOR ALL USING (true) WITH CHECK (true);
    `);
    console.log('‚úÖ Policy cho shipping_forms created');

    // Step 4: Re-enable RLS
    console.log('\n4Ô∏è‚É£ B·∫≠t l·∫°i RLS...');
    await client.query('ALTER TABLE user_settings ENABLE ROW LEVEL SECURITY;');
    await client.query('ALTER TABLE shipping_forms ENABLE ROW LEVEL SECURITY;');
    console.log('‚úÖ ƒê√£ b·∫≠t RLS\n');

    // Step 5: Grant permissions again
    console.log('5Ô∏è‚É£ Grant permissions...');
    await client.query('GRANT ALL ON user_settings TO anon, authenticated;');
    await client.query('GRANT ALL ON shipping_forms TO anon, authenticated;');
    console.log('‚úÖ ƒê√£ grant permissions\n');

    // Step 6: Test the fix
    console.log('6Ô∏è‚É£ TEST S·ª¨A CH·ªÆA...\n');

    // Test user_settings access
    const testSettingsResult = await client.query('SELECT COUNT(*) as count FROM user_settings');
    console.log('‚úÖ user_settings access test:', testSettingsResult.rows[0]);

    // Test shipping_forms access
    const testFormsResult = await client.query('SELECT COUNT(*) as count FROM shipping_forms');
    console.log('‚úÖ shipping_forms access test:', testFormsResult.rows[0]);

    // Test insert into user_settings
    console.log('\nüìù Test insert user_settings...');
    const insertResult = await client.query(`
      INSERT INTO user_settings (user_id, language, theme)
      VALUES ('test-user', 'vi', 'light')
      ON CONFLICT (user_id) DO UPDATE SET
        language = EXCLUDED.language,
        theme = EXCLUDED.theme,
        updated_at = NOW()
      RETURNING *
    `);
    console.log('‚úÖ Insert result:', insertResult.rows[0]);

    console.log('\nüéâ S·ª¨A CH·ªÆA HO√ÄN TH√ÄNH!');
    console.log('‚úÖ RLS policies ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t');
    console.log('‚úÖ Permissions ƒë√£ ƒë∆∞·ª£c grant');
    console.log('‚úÖ Test access th√†nh c√¥ng');
    console.log('\nüöÄ B√¢y gi·ªù th·ª≠ l·∫°i ·ª©ng d·ª•ng!\n');

    console.log('üìã H∆Ø·ªöNG D·∫™N KI·ªÇM TRA:');
    console.log('1. Refresh tr√¨nh duy·ªát (Ctrl+F5)');
    console.log('2. M·ªü Developer Tools (F12)');
    console.log('3. Ki·ªÉm tra Console tab - kh√¥ng c√≤n l·ªói 406');
    console.log('4. Th·ª≠ thay ƒë·ªïi ng√¥n ng·ªØ trong ·ª©ng d·ª•ng');

  } catch (error) {
    console.log('‚ùå L·ªñI KHI S·ª¨A RLS POLICIES:');
    console.log(error.message);

    // Alternative fix: Disable RLS completely for testing
    console.log('\nüîß TH·ª¨ NGUY√äN PH√ÅP KH√ÅC: DISABLE RLS COMPLETELY\n');

    try {
      console.log('T·∫Øt RLS ho√†n to√†n cho user_settings...');
      await client.query('ALTER TABLE user_settings DISABLE ROW LEVEL SECURITY;');

      console.log('T·∫Øt RLS ho√†n to√†n cho shipping_forms...');
      await client.query('ALTER TABLE shipping_forms DISABLE ROW LEVEL SECURITY;');

      console.log('‚úÖ ƒê√£ t·∫Øt RLS ho√†n to√†n - th·ª≠ l·∫°i ·ª©ng d·ª•ng!');

    } catch (fallbackError) {
      console.log('‚ùå Th·∫≠m ch√≠ fallback c≈©ng th·∫•t b·∫°i:', fallbackError.message);
    }

  } finally {
    await client.end();
    console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi PostgreSQL');
  }
}

// Ch·∫°y script s·ª≠a ch·ªØa
fixUserSettingsPolicies();
