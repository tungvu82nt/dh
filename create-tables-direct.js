// Script t·∫°o tables tr·ª±c ti·∫øp qua PostgreSQL connection
import pkg from 'pg';
const { Client } = pkg;

console.log('üî® T·∫†O TABLES TR·ª∞C TI·∫æP QUA POSTGRESQL...\n');

// Th√¥ng tin k·∫øt n·ªëi t·ª´ ng∆∞·ªùi d√πng
const connectionString = 'postgresql://postgres.lnqvjmdffzlxzavfxmek:Donhang1@@aws-1-ap-southeast-1.pooler.supabase.com:6543/postgres';

const client = new Client({
  connectionString: connectionString,
});

const sqlCommands = [
  `-- T·∫°o b·∫£ng shipping_forms
  CREATE TABLE IF NOT EXISTS shipping_forms (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    customer_name TEXT NOT NULL,
    customer_address TEXT NOT NULL,
    customer_phone TEXT,
    items JSONB NOT NULL DEFAULT '[]'::jsonb,
    total_weight DECIMAL(10,2) NOT NULL DEFAULT 0,
    total_quantity INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
  );`,

  `-- T·∫°o b·∫£ng user_settings
  CREATE TABLE IF NOT EXISTS user_settings (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id TEXT NOT NULL DEFAULT 'anonymous',
    language TEXT NOT NULL DEFAULT 'vi',
    theme TEXT NOT NULL DEFAULT 'light',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
  );`,

  `-- T·∫°o indexes
  CREATE INDEX IF NOT EXISTS idx_forms_created ON shipping_forms(created_at DESC);
  CREATE INDEX IF NOT EXISTS idx_settings_user ON user_settings(user_id);`,

  `-- Cho ph√©p truy c·∫≠p c√¥ng khai
  ALTER TABLE shipping_forms ENABLE ROW LEVEL SECURITY;
  ALTER TABLE user_settings ENABLE ROW LEVEL SECURITY;`,

  `-- T·∫°o policies ƒë∆°n gi·∫£n
  CREATE POLICY IF NOT EXISTS "allow_all_forms" ON shipping_forms FOR ALL USING (true);
  CREATE POLICY IF NOT EXISTS "allow_all_settings" ON user_settings FOR ALL USING (true);`,

  `-- Grant permissions
  GRANT ALL ON shipping_forms TO anon, authenticated;
  GRANT ALL ON user_settings TO anon, authenticated;`
];

async function createTables() {
  try {
    console.log('üîå K·∫øt n·ªëi ƒë·∫øn PostgreSQL...');
    await client.connect();
    console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!\n');

    for (let i = 0; i < sqlCommands.length; i++) {
      console.log(`üìã Ch·∫°y l·ªánh SQL ${i + 1}/${sqlCommands.length}...`);
      try {
        await client.query(sqlCommands[i]);
        console.log('‚úÖ L·ªánh th·ª±c hi·ªán th√†nh c√¥ng!');
      } catch (error) {
        console.log('‚ö†Ô∏è  L·ªánh g·∫∑p l·ªói:', error.message);
        // Ti·∫øp t·ª•c v·ªõi l·ªánh ti·∫øp theo thay v√¨ d·ª´ng
      }
    }

    console.log('\nüéâ HO√ÄN TH√ÄNH!');
    console.log('üì¶ ƒê√£ t·∫°o tables: shipping_forms, user_settings');
    console.log('üîç ƒê√£ t·∫°o indexes v√† policies');

    // Test k·∫øt n·ªëi tables
    console.log('\nüß™ TEST TABLES...');

    const formsResult = await client.query('SELECT COUNT(*) as count FROM shipping_forms');
    console.log(`üìä shipping_forms: ${formsResult.rows[0].count} records`);

    const settingsResult = await client.query('SELECT COUNT(*) as count FROM user_settings');
    console.log(`‚öôÔ∏è  user_settings: ${settingsResult.rows[0].count} records`);

    console.log('\nüöÄ S·∫¥N S√ÄNG S·ª¨ D·ª§NG!');
    console.log('Ch·∫°y: node test-connection-new.js ƒë·ªÉ ki·ªÉm tra');

  } catch (error) {
    console.log('‚ùå L·ªñI KHI T·∫†O TABLES:');
    console.log(error.message);

    if (error.message.includes('password')) {
      console.log('\nüîê V·∫§N ƒê·ªÄ X√ÅC TH·ª∞C:');
      console.log('1. Ki·ªÉm tra password trong connection string');
      console.log('2. ƒê·∫£m b·∫£o user c√≥ quy·ªÅn t·∫°o tables');
    }

    if (error.message.includes('connect')) {
      console.log('\nüåê V·∫§N ƒê·ªÄ K·∫æT N·ªêI:');
      console.log('1. Ki·ªÉm tra k·∫øt n·ªëi internet');
      console.log('2. Ki·ªÉm tra firewall/antivirus');
      console.log('3. Th·ª≠ l·∫°i sau v√†i ph√∫t');
    }

  } finally {
    await client.end();
    console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi PostgreSQL');
  }
}

// C√†i ƒë·∫∑t pg n·∫øu ch∆∞a c√≥
console.log('üì¶ Ki·ªÉm tra th∆∞ vi·ªán pg...');
import { exec } from 'child_process';

exec('npm list pg', (error, stdout) => {
  if (error || !stdout.includes('pg@')) {
    console.log('‚ùå Ch∆∞a c√†i ƒë·∫∑t pg. ƒêang c√†i ƒë·∫∑t...');
    exec('npm install pg', (installError) => {
      if (installError) {
        console.log('‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t pg:', installError.message);
        console.log('üí° H√£y ch·∫°y: npm install pg');
        return;
      }
      console.log('‚úÖ ƒê√£ c√†i ƒë·∫∑t pg th√†nh c√¥ng!');
      createTables();
    });
  } else {
    console.log('‚úÖ pg ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t');
    createTables();
  }
});
